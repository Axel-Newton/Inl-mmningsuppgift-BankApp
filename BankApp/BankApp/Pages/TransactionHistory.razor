@page "/TransactionHistory"
@using Bankapp.Domain
@inject IAccountService AccountService


<h3>Transaction History</h3>

<table class="table">
    <thead>
    <tr>
        <th>Account</th>
        <th>Type</th>
        <th>Amount</th>
        <th>Currency</th>
        <th>To/From Account</th>
        <th>Amount After</th>
        <th>Time</th>
    </tr>
    </thead>
    <tbody>
    

    @foreach (var t in _transactions)
    {
        <tr>
            <td>@t.AccountName</td>
            <td>@t.Type</td>
            <td>@(t.Type == TransactionType.Withdraw ? "-" : "+")@t.Amount</td>
            <td>@t.Currency</td>
            <td>@t.ToAccount</td>
            <td>@t.AmountAfter</td>
            <td>@t.Time.ToLocalTime()</td>


        </tr>
    }
    </tbody>
</table>

@code {
    private List<TransactionDisplayModel> _transactions = new();

    protected override void OnInitialized()
    {
        var accounts = AccountService.GetAccounts();
        _transactions = accounts
            .SelectMany(acc => acc.Transactions.Select(t => new TransactionDisplayModel
            {
                Time = t.TimeStamp,
                Type = t.TransactionType,
                AccountName = acc.Name,
                Amount = t.Amount,
                Currency = acc.Currency,
                AmountAfter = acc.Balance,
                ToAccount = t.ToAccountId
                
               
            }))
            .OrderByDescending(t => t.Time)
            .ToList();
    }

    private class TransactionDisplayModel
    {
        public DateTime Time { get; set; }
        public TransactionType Type { get; set; }
        public string AccountName { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public string Currency { get; set; } = string.Empty;
        public decimal AmountAfter { get; set; }
        public Guid? ToAccount { get; set; }
    }
}