@page "/TransactionHistory"
@using BankApp.Domain
@inject IAccountService AccountService

<h3>Transaction History</h3>
@if (_accounts.Count == 0)
{
    <p>No accounts yet!</p>
}
else
{
    <div class="mb-2">
        <label>Choose Account</label>
        <InputSelect TValue="Guid"
                     class="form-select"
                     id="accountSelect"
                     @bind-Value="SelectedAccountId">
            @foreach (var account in _accounts)
            {
                <option value="@account.Id">@account.Name - Balance: @account.Balance</option>
            }
        </InputSelect>
    </div>
    
    <div class="mb-2">
        <button class="btn btn-sm" @onclick="() => SetSort(SortKey.Date)">
            Sort by date @(currentKey == SortKey.Date ? (descending ? "up" : "down") : "")
        </button>
        <button class="btn btn-sm" @onclick="() => SetSort(SortKey.Amount)">
            Sort by amount @(currentKey == SortKey.Amount ? (descending ? "up" : "down") : "")
        </button>
    </div>
    
    @if (_selectedAccount == null || !_selectedAccount.Transactions.Any())
    {
        <p>No transactions yet!</p>
    }
    else
    {
        <table class="table table-sm">
            <thead>
            <tr>
                <th>Date</th>
                <th>Amount</th>
                <th>TransactionType</th>
                <th>Balance after</th>
                <th>From - To</th>
            </tr>
            </thead>
            
            <tbody>
                @foreach (var transaction in sortedTransaction())
                {
                    <tr>
                        <td>@transaction.TimeStamp.ToLocalTime().ToString("yyyy-M-d dddd")</td>
                        <td>@transaction.Amount</td>
                        <td>@transaction.TransactionType</td>
                        <td>@transaction.BalanceAfter</td>
                        <td>
                            @if (transaction.FromAccountId.HasValue && transaction.ToAccountId.HasValue)
                            {
                                <span>@(transaction.FromAccountId.Value.ToString()[..6]) -> @(transaction.ToAccountId.Value.ToString()[..6])</span>
                            }
                            else
                            {
                                <p>Unknown</p>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}



@code {
    //private List<TransactionDisplayModel> _transactions = new();
    private List<IBankAccount> _accounts = new();
    private IBankAccount? _selectedAccount;
    private Guid _selectedAccountId;


    private SortKey currentKey = SortKey.Date;
    private bool descending = true;
    
    //Sorteringsvarianter
    private enum SortKey
    {
        Date,
        Amount
    }

    private void SetSort(SortKey sortKey) //Metod som sorterar historiken
    {
        if (currentKey == sortKey)
        {
            descending = !descending;
        }
        else
        {
            currentKey = sortKey;
            descending = true;
        }
    }
    private Guid SelectedAccountId
    {
        get => _selectedAccountId;
        set
        {
            if(_selectedAccountId == value)
                return;
            _selectedAccountId = value;
            _selectedAccount = _accounts.FirstOrDefault(account => account.Id == value);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        _accounts = await AccountService.GetAccountsAsync();

        if (_accounts.Count > 0)
        {
            _selectedAccountId = _accounts[0].Id;
            _selectedAccount = _accounts[0];
        }
    }

    private IEnumerable<Transaction> sortedTransaction()
    {
        if (_selectedAccount == null)
            return Enumerable.Empty<Transaction>();
        
        //sortera lista. Datum och belopp
        var sortedList = _selectedAccount.Transactions.AsEnumerable();
        sortedList = currentKey switch
        {
            SortKey.Amount => (descending
                ? sortedList.OrderByDescending(t => t.Amount)
                : sortedList.OrderBy(t => t.Amount)),
            SortKey.Date => (descending
                ? sortedList.OrderByDescending(t => t.TimeStamp)
                : sortedList.OrderBy(t => t.TimeStamp)),
            _ => sortedList
        };
        return sortedList;
    }
    /*
    protected override void OnInitialized()
    {
        var accounts = AccountService.GetAccounts();
        _transactions = accounts
            .SelectMany(acc => acc.Transactions.Select(t => new TransactionDisplayModel
            {
                Time = t.TimeStamp,
                Type = t.TransactionType,
                AccountName = acc.Name,
                Amount = t.Amount,
                Currency = acc.Currency,
                AmountAfter = acc.Balance,
                ToAccount = t.ToAccountId
                
               
            }))
            .OrderByDescending(t => t.Time)
            .ToList();
    }

    private class TransactionDisplayModel
    {
        public DateTime Time { get; set; }
        public TransactionType Type { get; set; }
        public string AccountName { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public string Currency { get; set; } = string.Empty;
        public decimal AmountAfter { get; set; }
        public Guid? ToAccount { get; set; }
    }*/
}