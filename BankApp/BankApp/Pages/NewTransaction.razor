@page "/NewTransaction"
@using BankApp.Domain
@inject IAccountService AccountService
@inject NavigationManager Navigation

<h3>New Transaction</h3>

@if (_accounts.Count == 0)
{
    <p>No accounts available. Create an account first.</p>
}
else
{
    <div class="card p-4">
        <div class="form-group mb-3">
            <label for="account">Account:</label>
            <select id="account" class="form-control" @bind="_selectedAccountId">
                <option value="@Guid.Empty">-- Select Account --</option>
                @foreach (var acc in _accounts)
                {
                    <option value="@acc.Id">@acc.Name (@acc.Currency)</option>
                }
            </select>
        </div>

        <div class="form-group mb-3">
            <label for="type">Transaction Type:</label>
            <select id="type" class="form-control" @bind="_transactionType">
                <option value="@TransactionType.Deposit">Deposit</option>
                <option value="@TransactionType.Withdraw">Withdraw</option>
            </select>
        </div>

        <div class="form-group mb-3">
            <label for="amount">Amount:</label>
            <input id="amount" class="form-control" @bind="_amount" type="number" step="0.01"/>
        </div>

        <button class="btn btn-primary" @onclick="SubmitTransaction">Submit</button>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger mt-3">@_errorMessage</div>
        }
    </div>
}

@code {
    private List<IBankAccount> _accounts = new();
    private Guid _selectedAccountId = Guid.Empty;
    private TransactionType _transactionType = TransactionType.Deposit;
    private decimal _amount;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _accounts = await AccountService.GetAccountsAsync();
    }

    private async Task SubmitTransaction()
    {
        _errorMessage = string.Empty;

        if (_selectedAccountId == Guid.Empty)
        {
            _errorMessage = "Please select an account.";
            return;
        }

        var account = _accounts.FirstOrDefault(a => a.Id == _selectedAccountId);
        if (account == null)
        {
            _errorMessage = "Selected account could not be found.";
            return;
        }

        if (_amount <= 0)
        {
            _errorMessage = "Amount must be greater than zero.";
            return;
        }

        try
        {
            if (_transactionType == TransactionType.Deposit)
            {
                account.Deposit(
                    _amount,
                    toAccountId: account.Id,
                    fromAccountId: Guid.Empty,
                    description: "Deposit",
                    transactionType: TransactionType.Deposit
                );
            }
            else
            {
                account.Withdraw(
                    _amount,
                    toAccountId: Guid.Empty,
                    fromAccountId: account.Id,
                    description: "Withdraw",
                    transactionType: TransactionType.Withdraw
                );
            }

            await AccountService.UpdateAccount((BankAccount)account);
            Navigation.NavigateTo($"/TransactionHistory");
        }
        catch (ArgumentException exception)
        {
            _errorMessage = exception.Message;
        }
        catch (Exception ex)
        {
            _errorMessage = "An unexpected error occurred: " + ex.Message;
            Console.WriteLine(ex);
        }
    }

}