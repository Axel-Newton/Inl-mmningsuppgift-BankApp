@page "/NewTransaction"
@using Bankapp.Domain
@inject IAccountService AccountService
@inject NavigationManager Navigation

<h3>New Transaction</h3>

<div class="card p-4">
    <div class="form-group mb-3">
        <label for="account">Account:</label>
        <select id="account" class="form-control" @bind="selectedAccountId">
            <option value="">-- Select Account --</option>
            @foreach (var acc in accounts)
            {
                <option value="@acc.Id">@acc.Name (@acc.Currency)</option>
            }
        </select>
    </div>

    <div class="form-group mb-3">
        <label for="type">Transaction Type:</label>
        <select id="type" class="form-control" @bind="transactionType">
            <option value="@TransactionType.Deposit">Deposit</option>
            <option value="@TransactionType.Withdraw">Withdraw</option>
        </select>
    </div>

    <div class="form-group mb-3">
        <label for="amount">Amount:</label>
        <input id="amount" class="form-control" @bind="amount" type="number" step="0.01"/>
    </div>

    <button class="btn btn-primary" @onclick="SubmitTransaction">Submit</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

@code {
    private List<BankAccount> accounts = new();
    private Guid selectedAccountId;
    private TransactionType transactionType = TransactionType.Deposit;
    private decimal amount;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        accounts = await AccountService.GetAllAccounts();
    }
    
    
    private async Task SubmitTransaction()
    {
        var account = accounts.FirstOrDefault(a => a.Id == selectedAccountId);
        if (account == null)
        {
            errorMessage = "Please select an account.";
            return;
        }

        try
        {
            if (transactionType == TransactionType.Deposit)
            {
                account.Deposit(
                    amount,
                    toAccountId: account.Id,
                    fromAccountId: Guid.Empty,
                    description: "Deposit",
                    transactionType: TransactionType.Deposit
                );
            }
            else
            {
                account.Withdraw(
                    amount,
                    toAccountId: Guid.Empty,
                    fromAccountId: account.Id,
                    description: "Withdraw",
                    transactionType: TransactionType.Withdraw
                );
            }

            await AccountService.UpdateAccount(account);
            Navigation.NavigateTo($"../TransactionHistory");
        }
        catch (ArgumentException exception)
        {
            errorMessage = exception.Message;
        }
    }
}