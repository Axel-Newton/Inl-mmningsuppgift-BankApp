@page "/Transfer"
@inject IAccountService AccountService

<h3>Transfer</h3>
@if (_accounts.Count < 2)
{
    <p>Create at least 2 accounts to make a transfer</p>
}
else
{
    <EditForm Model="_model" OnValidSubmit="OnSubmitAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        
        <div class="mb-2">
            <label>From Account</label>
            <InputSelect TValue="Guid"
                         @bind-Value="_model.FromAccountId"
                         class="form-select"
                         @onchange="HandleFormChanged">
                <option value="@Guid.Empty">Choose Account...</option>
                @foreach (var account in _accounts)
                {
                    <option value="@account.Id">@account.Name - Balance: @account.Balance</option>
                }
            </InputSelect>
        </div>
        
        <div class="mb-2">
            <label>To Account</label>
            <InputSelect TValue="Guid"
                         @bind-Value="_model.ToAccountId"
                         class="form-select"
                         disabled="@(_model.FromAccountId == Guid.Empty)">
                <option value="@Guid.Empty">Choose Account</option>
                @foreach (var account in _toAccounts)
                {
                    <option value="@account.Id">@account.Name - Balance: @account.Balance</option>
                }
            </InputSelect>
        </div>
        
        <div class="mb-2">
            <label>Amount</label>
            <InputNumber TValue="decimal" @bind-Value="_model.Amount" class="form-control"></InputNumber>
        </div>
        
        <button type="submit" class="btn btn-primary">Transfer</button>
    </EditForm>
    
    <EditForm Model="_model" OnInvalidSubmit="OnSubmitAsync"></EditForm>
    <h4>Account</h4>
    <ul>
        @foreach (var account in _accounts)
        {
            <li>@account.Name - Saldo: @account.Balance</li>
        }
    </ul>
}




@code{
    private readonly TransferFormModel _model = new();
    private List<IBankAccount> _accounts = new();
    private List<IBankAccount> _toAccounts = new();



    private class TransferFormModel
    {
        public Guid FromAccountId { get; set; }
        public Guid ToAccountId { get; set; }
        public decimal Amount { get; set; }
    }

    protected override void OnInitialized()
    {
        _accounts = AccountService.GetAccounts();

        _toAccounts = _accounts;
    }
    private Task OnSubmitAsync()
    {
        if(_model.FromAccountId != Guid.Empty)
        try
        {
            AccountService.Transfer(_model.FromAccountId, _model.ToAccountId, _model.Amount);

            //Uppdatera Lista
            _accounts = AccountService.GetAccounts();

            var from = _accounts.First(x => x.Id == _model.FromAccountId);
            var to = _accounts.First(x => x.Id == _model.ToAccountId);

            _model.Amount = 0;
            StateHasChanged();
        }
        catch(Exception exception)
        {
            Console.WriteLine(exception.Message);
        }

        return Task.CompletedTask;
    }

    private void HandleFormChanged(ChangeEventArgs eventArgs)
    {
        if (Guid.TryParse(eventArgs.Value?.ToString(), out var id))
        {
            OnFormChanged(id);
        }
    }

    private void OnFormChanged(Guid fromId)
    {
        _model.FromAccountId = fromId;
        var from = _accounts.FirstOrDefault(x => x.Id == fromId);

        if (from != null)
        {
            _toAccounts = _accounts.Where(account => account.Id != fromId).ToList();
        }
        else
        {
            _accounts = _accounts.ToList();
        }
        
        _model.ToAccountId = Guid.Empty;
    }
}
