@page "/CreateAccount"

@inject IAccountService AccountService

<h3>Please create an account</h3>
<EditForm Model="_model" OnValidSubmit="CreateAccountAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary />
    <div className="mb-2">
        <label>Account Name</label>
        <InputText @bind-Value="_model.Name"/>
    </div>
    <div className="mb-2">
        <label>Account Type</label>
        <InputSelect @bind-Value="_model.AccountType">
            <option value="">Choose Account Type:</option>
            <option value="@AccountType.Deposit">Base Account</option>
            <option value="@AccountType.Savings">Savings Account</option>
        </InputSelect>
    </div>

    <div className="mb-2">
        <label>Currency</label>
        <InputSelect @bind-Value="_model.Currency">
            <option value="">Choose Currency:</option>
            @foreach (var currency in _currencies)
            {
                <option value="@currency">@currency</option>
            }
        </InputSelect>
    </div>

    <div className="mb-2">
        <label>Start Balance</label>
        <InputNumber @bind-Value="_model.InitialBalance"></InputNumber>
    </div>

    <button type="submit">Create Account</button>
</EditForm>

<button class="btn btn-primary" @onclick="GetAccountsAsync">Get Accounts</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-2">@errorMessage</div>  //Skriver ut error message om det finns
}
@if (!string.IsNullOrEmpty(successMessage)) 
{
    <div class="alert alert-success mt-2">@successMessage</div> //Skriver ut success message om det finns
}

<h4>All Accounts</h4>

@if (_showAccounts)
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Currency</th>
            <th>Balance</th>
            <th>Last Updated</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var accounts in accountsList)
        {
            <tr>
                <td>@accounts.Name</td>
                <td>@accounts.AccountType</td>
                <td>@accounts.Currency</td>
                <td>@accounts.Balance</td>
                <td>@accounts.LastUpdated.ToLocalTime()</td>
                <td>
                <button class="btn-danger" @onclick="() => DeleteAccountAsync(accounts.Id)">Delete Account</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code{
    private readonly CreateAccountModel _model = new();

    private readonly List<string> _currencies = new() { "SEK", "USD", "EURO" };

    private bool _showAccounts = false;
    private List<IBankAccount> accountsList = new();

    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private async Task GetAccountsAsync() //Hämtar konton
    {
        accountsList = await AccountService.GetAccountsAsync();
        _showAccounts = true;
    }

    private async Task CreateAccountAsync()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        try
        {
            await AccountService.CreateAccountAsync(
                _model.Name,
                _model.AccountType,
                _model.Currency,
                _model.InitialBalance);

            _model.Clear();
            successMessage = "Account created successfully.";

            // Refreshar displayade konton
            await GetAccountsAsync();
        }
        catch (Exception exception)
        {
            // visar error till användaren istället för rethrow
            errorMessage = $"Unable to create account: {exception.Message}";
            Console.WriteLine(exception);
        }
    }

    private async Task DeleteAccountAsync(Guid accountId)
    {
        try
        {
            await AccountService.DeleteAccountAsync(accountId);
            await GetAccountsAsync();
        }
        catch (Exception exception)
        {
            Console.WriteLine($"Error deleting account: {exception.Message}");
            errorMessage = $"Error deleting account: {exception.Message}";
        }
    }

    private class CreateAccountModel
    {
        public string Name { get; set; } = string.Empty;
        public AccountType AccountType { get; set; } = AccountType.Deposit;
        public string Currency { get; set; } = "SEK";
        public decimal InitialBalance { get; set; } = 0;

        public void Clear() //Metod som clearar anvöndarens input och val 
        {
            Name = string.Empty;
            AccountType = AccountType.Deposit;
            Currency = "SEK";
            InitialBalance = 0;
        }
    }
}
